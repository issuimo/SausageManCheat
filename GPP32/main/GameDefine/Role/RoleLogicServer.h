#pragma once

#include "../../main.h"

struct RoleLogicServer : II::Object {

	char loops[0x000004];
	char _myautoTestRoleData[0x000004];
	char _myRoleKillInof[0x000004];
	char _myWarFlagData[0x000004];
	int _userBuffEventId;
	int _legendaryKillNum;
	int intoWeakNum;
	bool _IsOnline;
	bool _isOldUserCar;
	bool _isOldMove;
	bool isChangeFunctionalGarmentEquipPart;
	int _userFlyJumpState;
	int _downOnLineTime;
	float aceDelayTime;
	UnityResolve::UnityType::Vector3 spotPoint;
	float _SpotPointTime_k__BackingField;
	float disconnectTime;
	int connId;
	float _UseBulletCount_k__BackingField;
	int _CountDisconnectTimes_k__BackingField;
	float _CountDisconnectElapsedTime_k__BackingField;
	bool _HasSendClearPublicFashion_k__BackingField;
	char _HasSendClearPublicFashion_k__BackingField_[0x000003];
	int _Season_k__BackingField;
	char roleLogic[0x000004];
	int LogicCreateTime;
	int ClientType;
	UnityResolve::UnityType::String* GameArea;
	int KillChanptionNum;
	int IsWarCount;
	int Schange;
	char medalBuffs[0x000004];
	char scoreChangeBuffs[0x000004];
	char TeamPids[0x000004];
	bool _IsAntiAddiction_k__BackingField;
	char _IsAntiAddiction_k__BackingField_[0x000003];
	int ConnectId;
	int ConnectCount;
	int WarLV;
	int IsExpMax;
	int UpTimeForWarCount;
	int IsVIP;
	int DisconnectRoleRank;
	int MemberCount;
	int StartWatchTime;
	int EndWatchTime;
	int KnockoutWatchTime;
	int IsFriend;
	int LatestRanking;
	int SeasonScore;
	int ActiveValue;
	int Suit;
	int IsAddiction;
	int XLCId;
	int IsMVP;
	int SaveKillRoleNum;
	char SaveKillRoleNum_[0x000004];
	std::int64_t CreateTime;
	float offLineTime;
	bool IsScoreProtect;
	bool IsSubstitutePunish;
	bool IsUseScoreProtect;
	char IsUseScoreProtect_[0x000001];
	char UseExtraAwardStates[0x000004];
	bool isOfflineTwoMin;
	bool isOfflineTwoMinDead;
	bool IsChanmption;
	bool IsAwakeGold;
	bool IsCallWarEnd;
	char IsCallWarEnd_[0x000003];
	UnityResolve::UnityType::String* platformName;
	bool isReachAlienWarship;
	char isReachAlienWarship_[0x000003];
	int gunFightScore;
	int nowGameGunFightScore;
	float ShowHolySwordTime;
	int startResurrectionTime;
	int deathTimeMark;
	UnityResolve::UnityType::String* ParachuteLocation;
	int joinTime;
	int ResurrectNum;
	int UprearRoleCountNum;
	int WeakRoleNum;
	int KillNoAIRoleNum;
	float KillRoleDistance;
	int CircusKillRoleNum;
	int DragonKillNum;
	int noDeadKillMax;
	float BeKillRoleDistance;
	int WarNumber;
	int RankGold;
	int RankExp;
	int DeadRank;
	bool IsShieldBroken;
	bool WeakHasShield;
	char WeakHasShield_[0x000002];
	float StartWeakTime;
	float BeHurt;
	UnityResolve::UnityType::String* DeadType;
	float BeHurtByThisAttack;
	int AttackHurt;
	float RealRoleAttackHurt;
	int DataOfBaoJi;
	int HurtHeadKillOrWeakNum;
	int DataBulletTotalNum;
	int DataHitBulletNum;
	int DataHitHeadBulletNum;
	int DataHitRealBulletNum;
	int DataHitBulletCheckNum;
	float maxBulletHitDiff;
	float maxBulletRaycastOffsetX;
	float maxBulletRaycastOffsetZ;
	float maxBulletRaycastAngle;
	bool IsUsedBigger;
	char IsUsedBigger_[0x000003];
	int DataBeResurrecueNum;
	UnityResolve::UnityType::String* headIcon;
	int score;
	int ranking;
	int peakStar;
	int WarTime;
	int ScoreLV;
	float LifeTime;
	float OnLineLifeTime;
	bool IsAddPlayer;
	bool IsOldUserWeapon;
	char IsOldUserWeapon_[0x000002];
	std::int64_t ArAiLockPlayerId;
	float ArAiLifeTime;
	int ArAiEquipId;
	std::int64_t ArAiCreateTime;
	int ArAiTriggerNum;
	char warEventID[0x000004];
	char warEventModuleDict[0x000004];
	char activityCoordinateDict[0x000004];
	UnityResolve::UnityType::String* groupIdStr;
	UnityResolve::UnityType::String* killSkinSign;
	char bornPos[0x000004];
	bool isMTPCheckSimulator;
	char isMTPCheckSimulator_[0x000003];
	int isSimulator;
	int isContinuousCliker;
	int startUseCarTime;
	char expressionData[0x000004];
	char danceData[0x000004];
	char jokerItemData[0x000004];
	char actionExpressData[0x00000C];
	char bulletInfoDict[0x000004];
	char meleeLightAttackInfoDic[0x000004];
	char meleeHeavyAttackInfoDic[0x000004];
	char shenLongInfoDict[0x000004];
	UnityResolve::UnityType::Vector3 LookPoint;
	char MyRoleSkillServer[0x000004];
	char myRoleCarSkin[0x000004];
	char myRoleDinosaurSkin[0x000004];
	char myRoleSkinChangeSkin[0x000004];
	char MyRoleCheat[0x000004];
	char Platform[0x000004];
	char LastItems[0x000004];
	UnityResolve::UnityType::String* RemarkInfo;
	float _OxygenServerValue_k__BackingField;
	bool _IsInOxygenColliderServer_k__BackingField;
	char _IsInOxygenColliderServer_k__BackingField_[0x000003];
	int _OxygenColliderCount_k__BackingField;
	char AddMoveType[0x000004];
	UnityResolve::UnityType::String* AddMoveID;
	UnityResolve::UnityType::Vector3 AddMoveLocalPoint;
	int DayKillCount;
	int GameStartTime;
	int MyWeakToOtherRoleUprearNum;
	int PowerAddSpeedNum;
	int HurtHeadNum;
	int WarTimes;
	int collectEnergyPower;
	UnityResolve::UnityType::String* WarId;
	UnityResolve::UnityType::String* UserName;
	UnityResolve::UnityType::String* LogUrl;
	UnityResolve::UnityType::String* APIUrl;
	bool IsBombMove;
	bool _IsHeavyMeleeAttack_k__BackingField;
	bool _IsDelayHeavyMeleeAttack_k__BackingField;
	char _IsDelayHeavyMeleeAttack_k__BackingField_[0x000001];
	char weaponSkillServer[0x000004];
	int _ShenLongBuffId_k__BackingField;
	float TotalUnopTime;
	int NegativeAgainst;
	bool IsActiveExit;
	char IsActiveExit_[0x000003];
	int ActiveExitTime;
	bool IsBirthIslandExit;
	char IsBirthIslandExit_[0x000003];
	int TeamSportsScore;
	bool isCalChampionshipScore;
	char isCalChampionshipScore_[0x000003];
	int NowChangeSportsScore;
	int DeadCount;
	int RoleBattleTime;
	UnityResolve::UnityType::Vector3 EndJumpPoint;
	bool IsJumpOutTeam;
	char IsJumpOutTeam_[0x000003];
	int NetworkState;
	int ParachuteStartTime;
	int ParachuteEndTime;
	int AIMeetPlayerTime;
	std::int64_t AIOwnerPlayerID;
	int AISpawnerIndex;
	bool jumpMusicIsEnd;
	char jumpMusicIsEnd_[0x000003];
	int overRank;
	int ziziBengHurt;
	bool IsSendBulletHitEvent;
	char IsSendBulletHitEvent_[0x000007];
	std::int64_t HeroID;
	std::int64_t HeroProficiency;
	std::int64_t heroCardId;
	int heroCardEquipTime;
	char RolePlatformId[0x000004];
	char allPickItemNets[0x000004];
	char hitRoleList[0x000004];
	char hitRoleEmptyDataList[0x000004];
	bool isWolfForeverDead;
	char isWolfForeverDead_[0x000003];
	int stateStartTime;
	char stateStartTime_[0x000004];
	std::int64_t roundStartWeaponId;
	UnityResolve::UnityType::String* roundStartWeaponName;
	int changeTime;
	int startStat;
	int endStat;
	int infectNum;
	int infectTime;
	int knockoutNum;
	int knockoutByNum;
	float deadLocationX;
	float deadLocationZ;
	float infectLocationX;
	float infectLocationZ;
	int bulletLessTime30;
	int bulletLessTime20;
	UnityResolve::UnityType::String* infectReason;
	int wolfPartyStateChangeTick;
	char deadPosList[0x000004];
	int _MovePlatformIndex_k__BackingField;
	UnityResolve::UnityType::Vector3 _MovePlatformOffset_k__BackingField;
	char _AceBuff_k__BackingField[0x000004];
	UnityResolve::UnityType::Vector3 jumpCaptainPos;
	bool _IsBuffIgnoreAirBombArea_k__BackingField;
	bool _isFirstLogin;
	char _isFirstLogin_[0x000002];
	float moveHoldTime;
	UnityResolve::UnityType::Vector3 _oldNowPoint;
	bool isMoveDisError;
	char isMoveDisError_[0x000003];
	float _rotaX;
	float _rotaY;
	int NowLockRoleNum;
	UnityResolve::UnityType::Vector3 ServerRota;
	UnityResolve::UnityType::Quaternion ServerRx;
	UnityResolve::UnityType::Quaternion ServerRy;
	UnityResolve::UnityType::Quaternion ServerLookRx;
	UnityResolve::UnityType::Quaternion ServerLookRy;
	float ServerCameraRatioLevel;
	float roleNoShootTime;
	float currentRecoverDelayTime;
	bool isRecover;
	bool currentIsRecover;
	char currentIsRecover_[0x000002];
	char autoRecoverHpData[0x00000C];
	bool enableAutoRecoverHp;
	bool IsUseStartPoint;
	char IsUseStartPoint_[0x000002];
	UnityResolve::UnityType::Vector3 startPoint;
	UnityResolve::UnityType::Vector3 StartRota;
	bool isCallResurrection;
	char isCallResurrection_[0x000003];
	float delayCheckCheatTime;
	int gunFightBornPosIndex;
	float _delayCheckStartPoint;
	bool isReMoveRole;
	char isReMoveRole_[0x000003];
	float checkTimeCount;
	bool isDownWaterWithCar;
	char isDownWaterWithCar_[0x000003];
	char teamGroupIds[0x000004];
	float waitCheckTime;
	int CheckCount;
	char saveMovePoints[0x000004];
	float delaySaveMovePointTime;
	float _deployPartyModeHeight;
	float ClearRoleLogicTime;
	bool IsDeadOnShip;
	char IsDeadOnShip_[0x000003];
	char _deadType[0x000008];
	char deadInfoType[0x000068];
	int sharkJumpErrorTime;
	char obConfig[0x000004];
	char lockRoleList[0x000004];
	float upDateLookCameraRoleDeploy;
	char aiLookNumberList[0x000004];
	int _NowLikeNum;
	bool IsStartLog;
	char IsStartLog_[0x000003];
	char BallBufflist[0x000004];
	char BodyEquiBuffs[0x000004];
	char PackEquipBuffs[0x000004];
	char HeadEquipBuffs[0x000004];
	char FunctionalGarmentBuffs[0x000004];
	char SmallVestBuffs[0x000004];
	char upperRail[0x000004];
	float HitRatio;
	float _reCheckChangeLockRoleTime;
	bool isSetAIOutOfRangeDead;
	char isSetAIOutOfRangeDead_[0x000003];
	char mStructFlySpeedLine[0x000018];
	bool closeSpeedLine;
	char closeSpeedLine_[0x000003];
	char _checkSendRole[0x000004];
	float _deployCheckSendRole;
	int bubbleBuffId;
	char _bulletHurtRoleError[0x000004];
	int bulletHurtErrorNum;
	char RelationDatas[0x000004];
	bool isNeedUseStartPoint;
	bool isNeedCheckCharacterItem;
	char isNeedCheckCharacterItem_[0x000002];
	int checkCharacterItemTime;
	int magicWandAutoId;
	float transEndureTime;
	float hideCheckDeployTime;
	int hideCheckOutCount;
	float areaCheckDeployTime;
	bool isInCollector;
	bool isCollecting;
	char isCollecting_[0x000002];
	float getTimeDeploy;
	bool isInWaring;
	char isInWaring_[0x000003];
	char curHoldOnRoleLogic[0x000004];
	float cheatRoleSize;
	float _cheatRoleSizeDelay;
	float useBombHurt;
	float useBombHurtTime;
	char _HardAttackStageCount_k__BackingField[0x000004];
	float delayHeavyAttackTime;
	char serverHotelIndex[0x000004];
	char soWuLinHotel[0x000004];
	char wuLinHotelPos[0x000004];
	char ultraFightRoleState[0x000004];
	int ultraManRayType;
	UnityResolve::UnityType::String* ultraManRayName;
	std::uint32_t overScore;
	float ultraFightCacheAttackHurt;
	int fashionId;
	char serverUltraFightMain[0x000004];
	char serverUltraFightData[0x000004];
	bool isWolfPartyCheckCheat;
	char isWolfPartyCheckCheat_[0x000003];
	int cheatDamage;
	int wolfPartyCheckCheatCount;
	char dataInfoItems[0x000004];
	float oldMood;
	UnityResolve::UnityType::Vector3 cameraDir;
	bool _IsSyncBladeBallModeUseAttack_k__BackingField;
	bool _IsSyncBladeBallModeAirCut_k__BackingField;
	bool _IsSyncBladeBallModeAttackInRange_k__BackingField;
	char _IsSyncBladeBallModeAttackInRange_k__BackingField_[0x000001];
	float _SyncBladeBallModeUseAttackTiming_k__BackingField;
	float _SyncBladeBallModeUseAttackReadyTime_k__BackingField;
	float _SyncBladeBallModeUseAttackCDTiming_k__BackingField;
	char _SyncBladeBallModeRoleStateType_k__BackingField[0x000004];
	int _GoToAuditoriumTime_k__BackingField;
	char BladeBallNextHitBallData[0x000004];
	bool isSyncBladeBallModeAutoAttack;
	char isSyncBladeBallModeAutoAttack_[0x000003];
	int _BladeBallModeRoundKillCount_k__BackingField;
	float _ActiveDuration_k__BackingField;
	float _BladeBallModeBattleOnlineTime_k__BackingField;
	float _BladeBallModeOnlineTime_k__BackingField;
	float _BladeBallModeRoundTime_k__BackingField;
	char serverBladeBallModeMgr[0x000004];
	float noobFishCDTime;
	float noobFishTouchCDTime;
	bool _IsAllDeadLastRole_k__BackingField;
	char _IsAllDeadLastRole_k__BackingField_[0x000003];
	char attackType[0x000004];
	bool isGunFightCheckCheat;
	bool _IsAIKill;
	char _IsAIKill_[0x000002];
	char secondaryAtkRoles[0x000004];
	char beWeakBodyPart[0x000004];
	int deadBuffIndex;
	bool IsUseTigaHope;
	char IsUseTigaHope_[0x000003];
	char MythSkinKillDatas[0x000004];
	char itemSkinData[0x000004];
	char tempSkinData[0x000004];
	char mythSkinData[0x000004];
	bool KnockoutIsCheat;
	bool KnockoutOffline;
	bool KnockoutIsPassAllBornPoint;
	bool KnockoutIsHeartbeatTimeout;
	int KnockoutOnlineTime;
	int KnockoutHeartbeatTimeoutTimes;
	int KnockoutResetCount;
	char PowerManager[0x000004];
	char UprearManager[0x000004];
	char pingManager[0x000004];
	char disconnectManager[0x000004];
	char roleServerTreasureManager[0x000004];
	char roleLogicStatisticsDataManager[0x000004];
	char roleLogicBeAttackedManager[0x000004];
	char PveDataManager[0x000004];
	bool isLoginSetDropItem;
	char isLoginSetDropItem_[0x000003];
	int loginSetDropItemValue;
	int loginSetDailyKillValue;
	bool _IsDataInfoSetDropItem_k__BackingField;
	bool isSendCheat;
	char isSendCheat_[0x000002];
	int WarDropItemValue;
	int DailyKillNum;
	char pathMgr[0x000004];
	char _NowTriangle_k__BackingField[0x000028];
	UnityResolve::UnityType::Vector3 _PveNavMeshPoint_k__BackingField;
	float currentTime;
	float reviveTime;
	bool isWolfPartyRevive;
	char isWolfPartyRevive_[0x000003];
	char shadowCopyRoleList[0x000004];
	float waitTime;
	char registerDeadTriggerAction[0x000004];
	char passiveSkillSigns[0x000004];
	float lastCarDamageTime;
	int lastCarId;
	float wolfManPowerDamage;
	int toWeakAttackRoleId;
	std::int64_t toWeakAttackItemId;
	char toWeakAttackItemParts[0x000004];
	char toWeakAttackType[0x000004];
	UnityResolve::UnityType::String* toWeakAttackSoSign;
	float attackToDistance;
	UnityResolve::UnityType::String* attackSoSign;
	char attackSoSign_[0x000004];
	std::int64_t attackItemId;
	int killPost;
	char attackItemParts[0x000004];
	char weakNoDownHpDeployTime[0x000004];

};