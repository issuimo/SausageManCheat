#pragma once
#include "../../main.h"

#include "RoleLogic.h"
#include "RoleControl.h"
#include "HitPart.h"

class Role : public II::MonoBehaviour {
public:
	char changedMeterial[0x000004];
	RoleLogic* roleLogic;
	char dieEvent[0x000004];
	char gameOverEvent[0x000004];
	char MyUserMedicine[0x000004];
	char MyHoldOnXCC[0x000004];
	char MyRoleFriendBubble[0x000004];
	RoleControl* MyRoleControl;
	char _MyRoleAI_k__BackingField[0x000004];
	char _RoleAIStartPointCheck_k__BackingField[0x000004];
	char MyRolePressWeapon[0x000004];
	char MyRoleAutoOpenDoor[0x000004];
	char MyRoleAutoPickUp[0x000004];
	char MyRoleAimAssist[0x000004];
	char MyRoleSkill[0x000004];
	char MyFpsStatistic[0x000004];
	char MyRoleEffect[0x000004];
	char MyRoleAutoRemind[0x000004];
	char MyRoleHitFeedBack[0x000004];
	char MyLRRoleAddMove[0x000004];
	char MyORRoleAddMove[0x000004];
	char MyRoleHitCheck[0x000004];
	char MyRoleColliderCheck[0x000004];
	char MyRoleSwim[0x000004];
	UnityResolve::UnityType::Transform* BuffBody;
	char MyRolePlayMove[0x000004];
	char MyRoleBodyPartCheat[0x000004];
	int UltraFightShotRayIndex;
	bool ferrisWheelCheck;
	bool isMainPose;
	char isMainPose_[0x000002];
	int timeStamp;
	bool isSetEnemyMapInfo;
	char isSetEnemyMapInfo_[0x000003];
	char MyRoleBombMove[0x000004];
	char _MyRoleFootBall_k__BackingField[0x000004];
	char _MyRoleUltraFight_k__BackingField[0x000004];
	char _MyRoleUltraFightHitPart_k__BackingField[0x000004];
	bool _CanPlayEquipAnim_k__BackingField;
	char _CanPlayEquipAnim_k__BackingField_[0x000003];
	float isJumpToGroundTime;
	float isJumpStartToUpTime;
	float isJumpTime;
	int ReloadBulletNum;
	int NextUserWeaponPackId;
	int parachuteIndex;
	int checkFireStateNum;
	char teamRoleSpotPoint[0x000004];
	char teamRoleRouteSpotPoint[0x000004];
	UnityResolve::UnityType::String* detachedPhrase;
	int nowCarDiverIndex;
	bool isIntoHouseTemp;
	bool _JumpToParachute_k__BackingField;
	char _JumpToParachute_k__BackingField_[0x000002];
	UnityResolve::UnityType::Transform* _myTransform;
	UnityResolve::UnityType::GameObject* _myGameObj;
	UnityResolve::UnityType::Vector3 sPoint;
	UnityResolve::UnityType::Transform* LockTarget;
	float lockTargetY;
	UnityResolve::UnityType::Transform* CatLockTarget;
	char myRoleMover[0x000004];
	char GetWeapons[0x000004];
	UnityResolve::UnityType::GameObject* BloodSplatter;
	UnityResolve::UnityType::Transform* DirBox;
	UnityResolve::UnityType::Transform* hookLookAt;
	char UserWeapon[0x000004];
	char NextUserWeapon[0x000004];
	char HeadEquipPart[0x000004];
	char BodyEquipPart[0x000004];
	char PackEquip[0x000004];
	char SmallVestEquipPart[0x000004];
	char CircusBallNet[0x000004];
	bool isRunInTerrain;
	char isRunInTerrain_[0x000003];
	UnityResolve::UnityType::String* circusBallRunSoundId;
	char obConfig[0x000004];
	bool isSendEnemyLockInfo;
	bool isDemonMachetePlay;
	char isDemonMachetePlay_[0x000002];
	float CircusBallDownTime;
	char FunctionalGarmentEquipPart[0x000004];
	char FireStateHide[0x000004];
	char mFlyJumpDynamicBone[0x000004];
	char mRoleHookFlyEnd[0x000004];
	char mRoleDragon[0x000004];
	char mRoleRobot[0x000004];
	char mRoleCat[0x000004];
	char mStartGame[0x000004];
	char gameWorld[0x000004];
	char pcRayCheck[0x000004];
	bool isResetWeak;
	bool _firstLanding_k__BackingField;
	bool isAddBombLineRender;
	bool isBattleLoadComplete;
	bool IsClear;
	bool isInitSkin;
	bool isSendAirPlan;
	char isSendAirPlan_[0x000001];
	UnityResolve::UnityType::Vector3 shipDiffPoint;
	bool tempIsAirJump;
	char tempIsAirJump_[0x000003];
	float cdTime;
	char OnUpdateCallBack[0x000004];
	int sendTimeScaleCount;
	float checkRoleSizeDelay;
	float _waitStartLaShunTime;
	float deployCheckTime;
	float delayPingCheckTime;
	char ShowPing[0x000002];
	char ClientPing[0x000002];
	char _PhysicalPing_k__BackingField[0x000004];
	float avgPing;
	float avgFps;
	float disconnectTime;
	int reConnectNum;
	int allPing;
	int pingCount;
	float allFps;
	int allFpsCount;
	char phoneCallBack[0x000004];
	UnityResolve::UnityType::GameObject* getShenLongBall;
	bool isSetTeamRoleData;
	char isSetTeamRoleData_[0x000003];
	float RoleDistance;
	float checkRoleToCameraDistanceTime;
	char roleOcclusion[0x000004];
	bool hideNoNetRole;
	bool IsEventRoleShow;
	char IsEventRoleShow_[0x000002];
	UnityResolve::UnityType::Vector3 _headPoint;
	UnityResolve::UnityType::Vector3 _lockTargetEndPoint;
	int carDiverIndex;
	float currentDelayCheckCarCollisionTime;
	int autoRoleId;
	UnityResolve::UnityType::String* nickName;
	UnityResolve::UnityType::String* nowTeamId;
	int isEnableTeamDamage;
	int killRoleNum;
	int nowUserWeapon;
	int nowUserWeaponPackIndex;
	int uprearRoleId;
	int resurrectionTime;
	int clientfallowJumpOutID;
	UnityResolve::UnityType::GameObject* showHolySwordEffect;
	float uprearRoleAnimatorSpeed;
	char demonClock[0x000004];
	bool tempPullOutHolySword;
	bool tempShowHolySword;
	char tempShowHolySword_[0x000002];
	float delayCheckResurrectionState;
	UnityResolve::UnityType::Vector3 heightPoint;
	UnityResolve::UnityType::Vector3 diMianPoint;
	UnityResolve::UnityType::Vector3 flyJumpPoint;
	float TouchDiMianDistance;
	float _TouchColliderDistance_k__BackingField;
	bool isDimianShip;
	bool isJumpOutShipFlyJump;
	char isJumpOutShipFlyJump_[0x000002];
	float _deployTouchDiMian;
	bool willTouchWater;
	char willTouchWater_[0x000003];
	float maxDisToWater;
	char hitList[0x000004];
	char downHits[0x000004];
	float checkDeltaHeight;
	bool _IsOnAlienWarship_k__BackingField;
	bool _IsUnderAlienWarship_k__BackingField;
	bool isReachAlienWarship;
	bool isInAirShipRoom;
	bool tempIsOnAlienWarship;
	char tempIsOnAlienWarship_[0x000003];
	float delayCheckOffShipFlyJumpTime;
	float touchDistance;
	float checkTouchTime;
	float inGroundedTime;
	UnityResolve::UnityType::GameObject* diveEff;
	UnityResolve::UnityType::GameObject* fallInWaterEff;
	float deployCheckHeight;
	bool isIngnoreAirBombArea;
	bool resetAiCollider;
	char resetAiCollider_[0x000002];
	int ChangePointCount;
	bool _IsEndJump_k__BackingField;
	bool IsFollowEndJump;
	bool isAlreadyUpTeamLandedData;
	char isAlreadyUpTeamLandedData_[0x000001];
	char soSlipRopeData[0x000004];
	float UserRopeTime;
	char UserHitPart[0x000004];
	UnityResolve::UnityType::GameObject* curUserMedicineObj;
	UnityResolve::UnityType::String* curUserMedicineSign;
	bool isPlayInDuQuanSound;
	bool isPlayOutDuQuanSound;
	char isPlayOutDuQuanSound_[0x000002];
	UnityResolve::UnityType::Transform* MyRoleLineRenderer;
	UnityResolve::UnityType::Transform* MyRoleStartPoint;
	char MyLineRender[0x000004];
	int SideAim;
	int sideAim;
	int TopShoot;
	int topShoot;
	bool isTopToRun;
	char isTopToRun_[0x000003];
	float heartBeat;
	bool shoqHeadgear;
	bool showArmoredVests;
	bool showBack;
	bool showFunctionalGarment;
	bool isIgnoreEquipState;
	char isIgnoreEquipState_[0x000003];
	float checkIgnoreTime;
	UnityResolve::UnityType::Transform* myCatParTrans;
	char clocks[0x000004];
	UnityResolve::UnityType::Transform* myCollectorTrans;
	char linkEffGos[0x000004];
	UnityResolve::UnityType::GameObject* linkEffGO;
	UnityResolve::UnityType::Transform* linkTrans;
	UnityResolve::UnityType::Vector3 linkPos;
	UnityResolve::UnityType::Vector3 myPos;
	char delayHideList[0x000004];
	int addIconId;
	bool _IsInWaring_k__BackingField;
	char _IsInWaring_k__BackingField_[0x000003];
	char myEngagementEnemys[0x000004];
	bool _lastIsHades_k__BackingField;
	bool isAddFireBox;
	char isAddFireBox_[0x000002];
	char fireBox[0x000004];
	bool isSetJumpPlaneFlyState;
	bool isSetJumpPlaneGlideState;
	char isSetJumpPlaneGlideState_[0x000002];
	UnityResolve::UnityType::String* musicSkydivingSign;
	UnityResolve::UnityType::String* musicSkydivingStateRTPCSign;
	UnityResolve::UnityType::String* musicSkydivingStateBoxMove;
	UnityResolve::UnityType::String* musicSkydivingSupaernova;
	float currentIdleTime;
	bool IsIdle;
	char IsIdle_[0x000003];
	float IdleTime;
	int idleType;
	std::uint32_t enterSound;
	bool isFlyJumpUpdateDynamicBone;
	bool runDirty;
	bool nowIsRun;
	char nowIsRun_[0x000001];
	UnityResolve::UnityType::GameObject* runEff;
	UnityResolve::UnityType::String* _useRunEffName;
	bool isRunToSide;
	bool isRunToTop;
	char isRunToTop_[0x000002];
	float proneingTime;
	UnityResolve::UnityType::GameObject* curUserBombObj;
	UnityResolve::UnityType::String* curUserBombSign;
	UnityResolve::UnityType::Animator* holdObjAnimator;
	bool enterMotionPlatform;
	char enterMotionPlatform_[0x000003];
	char curMotionPlatform[0x000004];
	bool showMotionPlatformUi;
	char showMotionPlatformUi_[0x000003];
	UnityResolve::UnityType::Animator* bladeBallModeWeaponAnimator;
	UnityResolve::UnityType::Transform* fallowTarget;
	UnityResolve::UnityType::Transform* JLSfallowTarget;
	UnityResolve::UnityType::Transform* fallowCameraTarget;
	char upperRailDic[0x000004];
	UnityResolve::UnityType::Transform* deadCameraPos;
	bool isInvincibleRim;
	char isInvincibleRim_[0x000003];
	int lastCameraLockRoleID;
	float lastCRX;
	float lastCRY;
	int diffCameraRatioLevel;
	int curLookRoleKillNumber;
	bool isChangeLookRole;
	char isChangeLookRole_[0x000003];
	float upLookRoleEventDeploy;
	float sendLockCameraDelay;
	float sendCameraDelay;
	int lookRoleId;
	UnityResolve::UnityType::String* LookRoleTeamId;
	char LookRole[0x000004];
	int LookRoleNum;
	bool _ObLook_k__BackingField;
	bool noobFishCheck;
	char noobFishCheck_[0x000002];
	float checkSceneItemCdTime;
	UnityResolve::UnityType::String* noobFishBuffPath;
	UnityResolve::UnityType::String* noobFishBuffName;
	char noobFishConfig[0x000004];
	int roleSizeLevel;
	float airJumpLevelTime;
	float roleSizeScale;
	float hookFlyDelayTime;
	float currentHookFlyDelayTime;
	float delayFlyCarMove;
	float oldAlpha;
	bool isNeedDelayActiveColliderCheck;
	char isNeedDelayActiveColliderCheck_[0x000003];
	float delayActiveColliderCheckTime;
	char CheckDoors[0x000004];
	char CheckDoor[0x000004];
	int hitCollisionId;
	int resurrecueId;
	bool isCmdRmoveHookBuff;
	bool isEnterVolcano;
	char isEnterVolcano_[0x000002];
	UnityResolve::UnityType::Vector3 enterVolcanoPos;
	bool isInVolcano;
	char isInVolcano_[0x000003];
	char CheckCar[0x000004];
	char dragonSwipCar[0x000004];
	bool canCheckCar;
	bool _showHorizontalBtn_k__BackingField;
	char _showHorizontalBtn_k__BackingField_[0x000002];
	char slideRope[0x000004];
	float checkCarDeploy;
	float checkDragonDeploy;
	float checkDoorDeploy;
	bool isUseBall;
	char isUseBall_[0x000003];
	float checkRoleSize;
	float touchColliderDelayTime;
	float curSize;
	float waitPlayDance;
	char waitPlayDance_[0x000004];
	char myActionData[0x000020];
	int _danceType;
	float _danceNum;
	int _tempDanceType;
	float _tempDanceNum;
	bool isReset;
	char isReset_[0x000003];
	char enterDancingFloorGrids[0x000004];
	bool _InDancingArea_k__BackingField;
	bool isDragonMove;
	char isDragonMove_[0x000002];
	float playFireStateAnimDuration;
	float playFireStateAnimTime;
	bool playFireState;
	char playFireState_[0x000003];
	char soPveWeaponShakeConfig[0x000004];
	char soPveWeaponShakeDic[0x000004];
	bool tempsFireState;
	bool oldLaSuanFireState;
	bool _IsLaShuaning_k__BackingField;
	bool IsActiveEndToFireState;
	bool IsUpOpenCloseFire;
	bool IsUpShotGunFire;
	bool _IsUpHiddenWeaponFire_k__BackingField;
	bool hasFire;
	char FuncCodeDown[0x000004];
	bool _IsDownFire_k__BackingField;
	char _IsDownFire_k__BackingField_[0x000003];
	float FireStartTime;
	bool isUseAutoFire;
	char isUseAutoFire_[0x000003];
	int FireWeaponId;
	char MyCheckFireState[0x000004];
	float CheckFileTime;
	float autoPrevFireTime;
	float prevFireTime;
	float tempFireDelay;
	float tempPreFireDelay;
	float tempAutoFireDelay;
	float tempAutoPreFireDelay;
	float aiFireStartTime;
	char AIFireBox[0x000004];
	bool isStartEject;
	char isStartEject_[0x000003];
	float noBulletPerformanceDelayTime;
	float currentNoBulletPerformanceDelayTime;
	bool _CanFireBow_k__BackingField;
	char _CanFireBow_k__BackingField_[0x000003];
	float bowDeployTime;
	bool lastIsHoldOnBow;
	bool isCheckPlayHoldBowFullEffect;
	bool IsCharging;
	bool tempMoveLocked;
	char mRoleCharacter[0x000004];
	bool isCanChangeCharacter;
	char isCanChangeCharacter_[0x000003];
	char _LeftHitPart_k__BackingField[0x000004];
	char _FinalAttackState_k__BackingField[0x000004];
	char _RoleHardAttackState_k__BackingField[0x000004];
	char meleeAttackConfigData[0x000004];
	UnityResolve::UnityType::String* nowMeleeSign;
	bool _IsCancelHeavyAttack_k__BackingField;
	char _IsCancelHeavyAttack_k__BackingField_[0x000003];
	int _LightAttackCount_k__BackingField;
	float _AttackPower_k__BackingField;
	float attackTime;
	float attackEndTime;
	bool isStartAttackCheck;
	char isStartAttackCheck_[0x000003];
	float attackStartCheckTime;
	float attackEndCheckTime;
	bool isAttackBtnDown;
	char isAttackBtnDown_[0x000003];
	float hitPartHeavyAttackDelayMoveTime;
	float hitPartHeavyAttackMoveTime;
	UnityResolve::UnityType::Vector3 hitPartHeavyAttackMoveDir;
	float hitPartHeavyAttackMoveSpeed;
	float hitPartHeavyAttackMoveAllTime;
	bool isStartHitPartHeavyAttackMove;
	bool impulseMove;
	char impulseMove_[0x000002];
	UnityResolve::UnityType::Vector3 impulseDir;
	float impulsePower;
	float impulseTime;
	float impulseTimeAll;
	char impulseCurve[0x000004];
	float impulseCurveValue;
	UnityResolve::UnityType::Vector3 impulsePosLimit;
	char impulseEndAction[0x000004];
	char raycastHits[0x000004];
	char rayList[0x000004];
	bool isStartHoldOnHitPart;
	bool isHoldOnHitPart;
	char isHoldOnHitPart_[0x000002];
	float holdHitPartTime;
	bool isHoldHitPartSuccess;
	char isHoldHitPartSuccess_[0x000003];
	float heavyAttackSuccessTime;
	float heavyAttackEnterTime;
	char startHoldEffectObj[0x000004];
	char holdLoopEffectObj[0x000004];
	char meleeAttackEffectObj[0x000004];
	std::uint32_t startHoldPlayingSoundId;
	std::uint32_t holdingPlayingSoundId;
	bool isStartSoundLoop;
	char isStartSoundLoop_[0x000003];
	int hardAttackSkillId;
	char lightMeleeEffectData[0x000004];
	char hardMeleeEffectData[0x000004];
	char meleeScaleChangeData[0x000004];
	char holdEffectConfig[0x000004];
	char attackEffectList[0x000004];
	bool isProneState;
	bool isShowHeavyAttackMoveSoundSource;
	char isShowHeavyAttackMoveSoundSource_[0x000002];
	float moveSoundSourceTime;
	float allMoveSoundSourceTime;
	float moveSoundSourceDelay;
	bool isStartReleaseEffectTime;
	char isStartReleaseEffectTime_[0x000003];
	float effectShowTime;
	bool leftHandShowState;
	bool isStartMeleeScaleChanging;
	char isStartMeleeScaleChanging_[0x000002];
	float nowMeleeScale;
	bool hasMeleeScaleChange;
	char hasMeleeScaleChange_[0x000003];
	int _HeavyMultiAttackCount_k__BackingField;
	bool _IsCheckHitPartDamage_k__BackingField;
	bool isRoleRunning;
	bool isResetInput;
	char isResetInput_[0x000001];
	UnityResolve::UnityType::Vector2 storeMoveDir;
	char hardAttackStageConfigData[0x000004];
	bool isHeavyAttackMultiAttack;
	char isHeavyAttackMultiAttack_[0x000003];
	int heavyMultiAttackAllCount;
	float singleHardAttackAllTime;
	float singleHardAttackTime;
	float showWaveTime;
	bool waveIsHeavy;
	bool haveAttackBuff;
	char haveAttackBuff_[0x000002];
	float singleHardAttackDamageCheckDelayTime;
	float singleHardAttackDamageCheckAllTime;
	float singleHardAttackDamageCheckTime;
	bool isStartSingleHardAttackDamageCheck;
	bool isNeedCheckAttackData;
	char isNeedCheckAttackData_[0x000002];
	II::Array<HitPart*>* punchList;
	char nowAttackHitPart[0x000004];
	UnityResolve::UnityType::String* BulletDownHpAudio;
	UnityResolve::UnityType::GameObject* deadCameraFollowObj;
	UnityResolve::UnityType::Transform* deadCameraFollowTransform;
	bool _IsInitDeadCameraFollowObj_k__BackingField;
	char _IsInitDeadCameraFollowObj_k__BackingField_[0x000003];
	char bulletHurtRoleData[0x000004];
	char checkBulletHurtRoleData[0x000004];
	char checkPickItem[0x000004];
	int checkPickItemNum;
	float pickItemDeployTime;
	bool checkElasticPickReload;
	bool isSendFirstPickUpItem;
	bool showNoobFishBoothButton;
	char showNoobFishBoothButton_[0x000001];
	int showNoobFishBoothBuffId;
	char pickItems[0x000004];
	char checkCircusBall[0x000004];
	bool canCheckCircusBall;
	bool canCheckCannon;
	bool hasPickItem;
	char hasPickItem_[0x000001];
	char oldYellow[0x000004];
	char oldNormal[0x000004];
	char newYellow[0x000004];
	char newNormal[0x000004];
	char resultList[0x000004];
	bool isReUseItem;
	char isReUseItem_[0x000003];
	int userItemState;
	char userItemDic[0x000004];
	int cmdUseItemState;
	float biggerSize;
	char useItemSigns[0x000004];
	char useItemSounds[0x000004];
	UnityResolve::UnityType::String* oldPlayItemSound;
	float jumpHeight;
	int jumpNum;
	float _canAirJumpHeight;
	bool isAlreadyPlay;
	char isAlreadyPlay_[0x000003];
	UnityResolve::UnityType::GameObject* littleJumpEff;
	UnityResolve::UnityType::GameObject* bigJumpEff;
	float lastCheckJumpRatioTime;
	float NowMoveAngle;
	UnityResolve::UnityType::Vector3 moveAngleDir;
	UnityResolve::UnityType::Vector3 moveAnglePoint;
	float glideYSpeed;
	UnityResolve::UnityType::Vector3 lastRolePoint;
	float lastLockMoveTime;
	char gandaFlyTeamList[0x000004];
	int gandaFlyBuffId;
	float waitLerpMoveTime;
	float downDiMianY;
	float downDiMianYSpeed;
	float delayMoveTime;
	UnityResolve::UnityType::Vector3 lastRollDir;
	bool isChange;
	bool isNeedMove;
	char isNeedMove_[0x000002];
	float pushLimitV;
	float pushLimitH;
	float delayRotaTime;
	float lastRotaX;
	float lastRotaY;
	bool isRotaChange;
	char isRotaChange_[0x000003];
	float MoveAngle;
	float deployDiMianTime;
	bool isSendRoleDownAround;
	bool isNeedCheckNoviceGuideAround;
	bool isCloseLandMove;
	char isCloseLandMove_[0x000001];
	float waitCloseLandMoveTime;
	UnityResolve::UnityType::Vector3 sendPoint;
	float sDepoyTime;
	float SecondDistance;
	float tempCheckTime;
	UnityResolve::UnityType::Vector3 tempCheckPos;
	float tempAutoCheckTime;
	UnityResolve::UnityType::Quaternion tempRoleQuaternion;
	float pushMoveSpeed;
	float checkMoveValueDelay;
	float checkPointTime;
	bool onMovePlatform;
	char onMovePlatform_[0x000003];
	UnityResolve::UnityType::Vector3 movePlatformOffset;
	std::uint32_t soundId;
	float reloadDuration;
	float delayRevertReloadState;
	float delayRobotMoveTime;
	float playRunSoundDeploy;
	float startPlayRunSoundDeployTime;
	std::uint32_t MoveSoundPlayingId;
	bool _HasPlaySource_k__BackingField;
	char _HasPlaySource_k__BackingField_[0x000003];
	float otherPlayerIsLand;
	bool isPlayingLoopMove;
	char isPlayingLoopMove_[0x000003];
	float fsRayCheckDis;
	char fsHits[0x000004];
	char checkSoundMatList[0x000004];
	float waitPlayCannonFlySourceTime;
	float curCannonFlySourcePlayTime;
	std::uint32_t fireSoundPlayingId;
	std::uint32_t reloadAudio;
	float playParachuteSoundDelay;
	bool _IsPlayParachuteMove_k__BackingField;
	char _IsPlayParachuteMove_k__BackingField_[0x000003];
	std::uint32_t flyMachineIdleSoundPlayingId;
	std::uint32_t curEnviromentMusic;
	char lastSpaceType[0x000004];
	char curSpaceType[0x000004];
	char nowStandbyState[0x000004];
	char lastFlyJumpState[0x000004];
	char _nowFlyJumpState[0x000004];
	char _nowJumpState[0x000004];
	char standByState[0x000004];
	bool tempInvicable;
	bool tempResurrecueOther;
	bool tempBeResurrecue;
	bool tempIsStartFly;
	bool tempPressWeapon;
	bool tempPlayRobotJump;
	bool tempPlayPaokuJump;
	bool tempPlayJumpEnhance;
	bool tempIsWeak;
	bool tempIsLiftup;
	bool tempIsBeLiftup;
	bool lastIsFlyMan;
	bool lastIsShadowCopy;
	bool isResetDone;
	char isResetDone_[0x000002];
	char UprearRole[0x000004];
	char XCCRole[0x000004];
	float UprearRoleTime;
	int uprearRoleTimeMark;
	float beUprearRoleTime;
	float maxUprearNeedTime;
	int oldIsUprearRole;
	UnityResolve::UnityType::String* oldUprearRoleSetEffect;
	UnityResolve::UnityType::GameObject* uprearRoleEffect;
	char uprearRoleEffectParticleSystem[0x000004];
	UnityResolve::UnityType::GameObject* uprearRoleRelationEffect;
	std::uint32_t uprearRelationEffectSoundId;
	UnityResolve::UnityType::String* uprearRoleRelationEffectSign;
	UnityResolve::UnityType::GameObject* helpMeEffect;
	UnityResolve::UnityType::GameObject* thankUEff;
	float thankUEffLifeTime;
	char uprearRoleList[0x000004];
	bool hasClientHasUprearRole;
	char hasClientHasUprearRole_[0x000003];
	int uprearRoleNum;
	float uprearRate;
	float _canUpreraRoleDeployTime;
	float blockClearUprearRoleTime;
	bool isOnLineUseForWeaponSound;
	char isOnLineUseForWeaponSound_[0x000003];
	int reNowUserWeaponPackId;
	float changeWeaponStateDelayTime;
	int lastCmdWeaponId;
	char lockEnemyList[0x000004];
	int lockGloveId;
	float waitCancelChangeWeapon;
	bool isSendCheck;
	char isSendCheck_[0x000003];
	float waitCheckTime;
	bool isLerpRotation;
	char isLerpRotation_[0x000003];
	UnityResolve::UnityType::Vector3 lerpTargetRotation;
	float lerpRotationSpeed;
	bool isAttackedMoving;
	char isAttackedMoving_[0x000003];
	float attackedSpeed;
	float finalAttackedSpeed;
	UnityResolve::UnityType::Vector3 attackedDir;
	float moveStateDampingSpeed;
	float normalStateDampingSpeed;
	float attackedMoveTime;
	int nowPerTime;
	char allWolfDir[0x000004];
	bool isPlayHitAnim;
	char isPlayHitAnim_[0x000003];
	char _NormalHitData_k__BackingField[0x000020];
	char _SavePunchEquips_k__BackingField[0x000004];
	char _NowWolfPartyPunchType_k__BackingField[0x000004];
	bool isFirstInitWolfUIData;
	char isFirstInitWolfUIData_[0x000003];
	char lastShowState[0x000004];
	bool isShowWolfUiData;
	char isShowWolfUiData_[0x000003];
	char lastRoleState[0x000004];
	char clientWolfPartyRoleState[0x000004];
	int controlMode;
	float flyUpTime;
	float flyUpSpeed;
	bool isFlymanUp;
	bool isFlymanDown;
	char isFlymanDown_[0x000002];
	float roleSpeed;
	bool isFlymanMove;
	bool isShowTips;
	char isShowTips_[0x000002];
	float lastUpDown;
	UnityResolve::UnityType::GameObject* wingObj;
	char gandaFlyControl[0x000004];
	char config[0x000004];
	std::uint32_t wingStartSoundId;
	std::uint32_t wingSoundId;
	float kittyJumpSpeed;
	float kittyDeltaSpeed;
	float kittyFallSpeed;
	bool isKittyCamera;
	char isKittyCamera_[0x000003];
	float kittyCameraTime;
	float kittyJumpDelayTime;
	float kittySpeed;
	char KittyEnemyIDList[0x000004];

	static auto Update() -> void {
		if (!pClass) pClass = I::Get("Assembly-CSharp.dll")->Get("Role");
		if (pClass) {
			std::vector<Role*> temp{};
			Role* local{};
			try {
				[&]() {
					__try {
						[&]() {
							for (const auto pRole : pClass->FindObjectsByType<Role*>()) {
								if (!IsBadReadPtr(pRole, sizeof(Role))) {
									if (!IsBadReadPtr(pRole->roleLogic, sizeof(RoleLogic)) && pRole->roleLogic->isLocalRole) {
										local = pRole;
									}
									temp.push_back(pRole);
								}
							}
						}();
					} __except (EXCEPTION_EXECUTE_HANDLER) {
						[]() {
							ERROR("Role-FindObjectsByType (except)");
						}();
					}
				}();
			} catch (...) {
				ERROR("Role-FindObjectsByType (catch)");
			}
			std::lock_guard lock(mutex);
			vector = temp;
			localRole = local;
		}
	}

	inline static std::mutex mutex;
	inline static Role* localRole;
	inline static std::vector<Role*> vector;
	inline static I::Method::MethodPointer<void, void*, II::Vector3> pInit;
	inline static I::Method::MethodPointer<void, void*, bool> pClear;
private:
	inline static I::Class* pClass;
};