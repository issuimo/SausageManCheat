#pragma once
#include "../../main.h"

#include "../Pickitem/PickItemNet.h"

struct RoleLogic : II::MonoBehaviour {
	char loops[0x000004];
	char skinInfo[0x000058];
	char myStatistData[0x000004];
	char myStandbyState[0x000004];
	bool _isInit;
	bool isResetDone;
	bool _isStartFly;
	char _isStartFly_[0x000001];
	int _nowUserWeaponId;
	float _moveH;
	float _moveV;
	float _nowPackNum;
	float checkUserWeaponTime;
	int arAiShowDistance;
	int _roleShowDistance;
	int _attackRoleId;
	int _KillRoleNumOld;
	bool _KillRoleNumChange;
	bool _deadNumChange;
	char _deadNumChange_[0x000002];
	int _deadNumOld;
	float TouchWaterPointY;
	char MyRoleBaseData[0x000004];
	char MyRoleBasePcData[0x000004];
	char myRoleNet[0x000004];
	char MyRoleBuffControl[0x000004];
	int WarReportPing;
	int WarReportPhysicalPing;
	char IdCardSignDatas[0x000004];
	UnityResolve::UnityType::String* IdCardSkinDataJson;
	int autoRoleId;
	bool IsOpenCheat;
	char IsOpenCheat_[0x000003];
	UnityResolve::UnityType::String* NickName;
	std::int64_t playerId;
	char OnSetPlayerIdCallBack[0x000004];
	UnityResolve::UnityType::String* teamId;
	char _OnTeamIdChange_k__BackingField[0x000008];
	std::int64_t _ClubId_k__BackingField;
	float BuffAddMoveSpeed;
	int LostRoleRank;
	int UniteId;
	int TeamRoleIndex;
	std::int64_t TeamNum;
	int LookOtherTime;
	int UprearRoleId;
	UnityResolve::UnityType::String* uprearRoleEffect;
	int holdOnRoleId;
	int HoldOnXCCId;
	UnityResolve::UnityType::Quaternion NowRotation;
	UnityResolve::UnityType::Vector3 NowPoint;
	UnityResolve::UnityType::Vector3 SpotPoint;
	UnityResolve::UnityType::Vector3 movePipesEntrancePoint;
	char RouteSpotPoint[0x000004];
	UnityResolve::UnityType::Vector3 CarSpotPoint;
	int LastUserCarId;
	int PlayBoxIndex;
	int UserCarId;
	char UserCar[0x000004];
	int CarDiverIndex;
	int ParachuteIndex;
	bool IsSyncParachuteIndex;
	char IsSyncParachuteIndex_[0x000007];
	std::int64_t GroupID;
	int deadNum;
	int IsEnableTeamateDamage;
	int ResurrectionTime;
	int AIFashionId;
	bool IsTesttoolHPInvincible;
	bool IsTesttoolMoodInvincible;
	bool IsTesttoolResurrectioning;
	char IsTesttoolResurrectioning_[0x000005];
	std::int64_t LockPlayerId;
	std::int64_t LockRoleNetPlayerId;
	char LockTargetRole[0x000004];
	char LockTargetRoleNet[0x000004];
	char myType[0x000004];
	int RoleLv;
	int Icon;
	int UseTaptapAvatar;
	int _CreditScore_k__BackingField;
	bool _IsReflowPlayer_k__BackingField;
	char _IsReflowPlayer_k__BackingField_[0x000003];
	UnityResolve::UnityType::String* _PveHandBook_k__BackingField;
	bool _IsReadPveHandBook_k__BackingField;
	char _IsReadPveHandBook_k__BackingField_[0x000003];
	UnityResolve::UnityType::String* TaptapAvatar;
	int Sex;
	int myScore;
	int myGetCoinNum;
	char uprearMeRoleList[0x000004];
	int UprearRoleTime;
	bool ObLook;
	char ObLook_[0x000003];
	UnityResolve::UnityType::Vector3 markpos;
	char PlayBoxEffectState[0x000004];
	char PlayBoxState[0x000004];
	char mFallower[0x000004];
	char mCurrentFallow[0x000004];
	UnityResolve::UnityType::Vector3 shipDiffPoint;
	char shipDiffPoint_[0x000004];
	std::int64_t IntoWarTime;
	char PlayerPlatform[0x000004];
	int PreHandRoleId;
	int NextHandRoleId;
	bool IsBlastTeam;
	char IsBlastTeam_[0x000003];
	char _TitleData_k__BackingField[0x000020];
	char flyJumpState[0x000004];
	char jumpState[0x000004];
	int JumpNum;
	bool IsPaoKuHitCancel;
	bool IsZetaPreshaking;
	bool IsTigaZepellionRayClient;
	bool IsHoldOnBomb;
	UnityResolve::UnityType::String* HoldOnItemSign;
	int SideAim;
	int nowUserWeaponId;
	int nowUserWeaponPackId;
	float BreathValue;
	float WeakValue;
	float Power;
	float hp;
	float maxHp;
	float MaxPower;
	float MaxBreathValue;
	float MaxWeakValue;
	char GetWeapons[0x000004];
	char PickedWeaponsAutoId[0x000004];
	char GetItems[0x000004];
	char HeadEquipPart[0x000004];
	char BodyEquipPart[0x000004];
	char PackEquip[0x000004];
	char FunctionalGarmentEquipPart[0x000004];
	char SmallVestEquipPart[0x000004];
	char UserElasticWeapon[0x000004];
	char UserHitPart[0x000004];
	PickItemNet* UserWeapon;
	char UserCircusBalllNet[0x000004];
	bool IsSendActiveItem;
	char IsSendActiveItem_[0x000003];
	int KillRoleNum;
	int _ToWeakRoleNum_k__BackingField;
	int TeamSTG;
	int DataOfZhuGong;
	int noDeadKillNum;
	int deadRealNum;
	float partyModeSurviveTime;
	int KillRealRoleNum;
	int HurtRealRoleValue;
	int BeReportNum;
	bool IsReportOver;
	char IsReportOver_[0x000003];
	char mRoleCharacter[0x000004];
	UnityResolve::UnityType::String* mRoleTransSign;
	int _AILevel_k__BackingField;
	bool IsTestToolAddAI;
	bool isIngnoreAirBombArea;
	char isIngnoreAirBombArea_[0x000002];
	float uprearRoleAnimatorSpeed;
	int hookFlyEndBuffID;
	UnityResolve::UnityType::Vector3 LocalShipDiffPoint;
	char roleLogicServer[0x000004];
	char roleLogicClient[0x000004];
	UnityResolve::UnityType::String* deviceId;
	UnityResolve::UnityType::Vector3 patrolCenter;
	char patrolPosList[0x000004];
	int shipBuffId;
	int myEnergyPower;
	int myAddEnergyPower;
	int fallowJumpOutID;
	int FallowJumpColorID;
	char gameWorld[0x000004];
	bool IsLookRole;
	char IsLookRole_[0x000003];
	char LookRole[0x000004];
	float ChangeRoleSizeSpeed;
	float RoleSizeEffectScaleFix;
	char mRoleParachuteFollowing[0x000004];
	char mRoleResurrection[0x000004];
	bool IsRoleSizeChanging;
	char IsRoleSizeChanging_[0x000003];
	float RoleSize;
	char myNewFriendIdList[0x000004];
	bool IsRoleAddEffect;
	bool IsPaokuStorageClient;
	bool _IsChangeFashionPart_k__BackingField;
	bool _IsChangeSkinInfo_k__BackingField;
	bool _gandaFlyCanExit_k__BackingField;
	bool _gandaFlyEarly_k__BackingField;
	char _gandaFlyEarly_k__BackingField_[0x000002];
	int TopShoot;
	bool isShowSpeedBuff;
	char isShowSpeedBuff_[0x000003];
	float isShowSpeedRate;
	UnityResolve::UnityType::Vector3 deadShipDiffPos;
	bool isLocalRole;
	bool _IsPunishment_k__BackingField;
	bool _IsInGiantBattleRangeOfTime_k__BackingField;
	bool _IsLockGiantBattleOfTime_k__BackingField;
	bool _IsInGiantBattleRangeDeath_k__BackingField;
	bool _IsSpecialJump_k__BackingField;
	char _IsSpecialJump_k__BackingField_[0x000002];
	char birthIslandSetting[0x000004];
	char bornData[0x00001C];
	UnityResolve::UnityType::String* lossDataUID;
	char soWuLinHotel[0x000004];
	char wuLinHotelControls[0x000004];
	char lastRoleEnterHotelId[0x000004];
	int moveDir;
	char _equipItemNet[0x000004];
	bool IsPushRoleDir;
	char IsPushRoleDir_[0x000003];
	float speed;
	UnityResolve::UnityType::Vector3 dir;
	bool tempTransfer;
	bool isReconnect;
	char isReconnect_[0x000002];
	char hitList[0x000004];
	UnityResolve::UnityType::Vector3 groundPoint;
	float mood;
	float maxMood;
	UnityResolve::UnityType::Vector3 roleMiddleOffset;
	bool hasInitDataInfo;
	char hasInitDataInfo_[0x000003];
	float nowDelayTime;
	char dataInfoItems[0x000004];
	bool hasReciveData;
	char hasReciveData_[0x000003];
	char KnockoutItem[0x000004];
	bool isKnockoutDisconnect;
	char isKnockoutDisconnect_[0x000003];
	char localSyncStates[0x000004];
	char bubbleObjList[0x000004];
	char roleSpecialBaseData[0x000004];
	int _WolfPartyRuleScore_k__BackingField;
	char wolfPartyRoleSOData[0x000004];
	char nowWolfPartyDefaultRoleData[0x000004];
	char nowWolfPartyRoleState[0x000004];
	char wolfPartySoundAndParticleData[0x000004];
	bool hasBall;
	bool isDispose;
	char isDispose_[0x000002];
	char updateRegister[0x000004];
	char roleLogicFeatures[0x000004];
	bool _IsUseEnhanceJumping_k__BackingField;
	char _IsUseEnhanceJumping_k__BackingField_[0x000003];
	char noobFishPos[0x000004];
	char useLocalBuffSkillList[0x000004];
	char skillCoolDict[0x000004];
	bool isSyncDataInit;
	char isSyncDataInit_[0x000003];
	float dataInitTime;
	char localSynAction[0x000004];
	char myStateData[0x00000C];
	bool exIsInCannon;
	bool exIsOpenRoulette;
	bool exIsHoldRole;
	bool exIsUseSkill;
	bool exIsOpenPack;
	bool exIsSwim;
	bool exIsPickItem;
	char exIsPickItem_[0x000001];
	char exCmdStateBits[0x000004];
	char indexChangeList[0x000004];
	char bitsChangeList[0x000004];
	bool exIsRealDead;
	bool exIsChangeRoleSize;
	char exIsChangeRoleSize_[0x000002];
	float delayCheckSyncTime;
	char syncStateData[0x00000C];
	char syncIndexChangeList[0x000004];
	char syncBitsChangeList[0x000004];
	char cmdIndexChangeList[0x000004];
	char cmdBitsChangeList[0x000004];
	char checkBits[0x000004];
	int checkBit;
	int weaponIndexMin;
	char weaponIndexMax[0x000004];
};